#ACTION {^kxwt_area -1}
{
	#variable {kxwt[area]} {-1};
	#variable {areaNumber} {-1};
	#variable {areaName} {default};
	#if {$oldAreaNumber != $areaNumber}
	{
		play new_area;
		#variable {oldAreaNumber} {-1}
	}
}
{7}

#ACTION {^kxwt_area %d %2}
{
	#variable {kxwt[area]} {%1 %2};
	#variable {areaNumber} {%1};
	#variable {areaName} {%2};
	#if {$oldAreaNumber != $areaNumber}
	{
		play new_area;
		#variable {oldAreaNumber} {%1};
		#showme %2
	}
}
{8}

#ACTION {^kxwt_event quest %1}
{
	#variable {kxwt[event]} {quest %1};
	post $name completed quest: %1
}
{8}

#ACTION {^kxwt_exp %d}
{
	#variable {kxwt[exp]} {%1};
	#variable {lastReceivedExp} {%1};
	#if {!&{oldExp} || $oldExp > %1}
	{
		#variable {oldExp} {%1}
	};
	#math {expGained} {%1 - $oldExp};
	#if {&{groupExperience}}
	{
		#math {groupExperience} {$groupExperience + $expGained}
	};
	#variable {oldExp} {%1};
	#if {&{autolevelClass[3]}}
	{
		#if {"$justLeveled" != "true" && ${autolevelClass[3]} <= %1}
		{
			level ${autolevelClass[2]};
			#variable {justLeveled} {true};
			#delay {levelTimer} {#variable {justLeveled} {false}} {90}
		}
	};
	#if {"${auto[buypractice]}" == "true" && "${spam[practice}" != "true" && %1 >= ${auto[buyPracticeExperience]}]}
	{
		train practice;
		spamset practice
	}
}
{8}

#ACTION {^kxwt_fighting %1 %2 %3}
{
	#undelay {autocombatDelay};
	#unvariable {autocombatPaused};
	#delay {autocombatDelay} {#var {autocombatPaused} {1}} {60};
	#variable {kxwt[fighting]} {%1 %2 %3};
	#variable {busy} {false};
	#variable {character[inBattle]} {true};
	#variable {awayMessage} {false};
	#if {!&{beeps}}
	{
		#variable {beeps} {true}
	};
	#if {"$beeps" == "true"}
	{
		#if {%1 >= 90}
		{
			#math {enemyConditionTone} {%1 + 400}
		};
		#elseif {%1 >= 80}
		{
			#math {enemyConditionTone} {%1 + 380}
		};
		#elseif {%1 >= 70}
		{
			#math {enemyConditionTone} {%1 + 360}
		};
		#elseif {%1 >= 60}
		{
			#math {enemyConditionTone} {%1 + 340}
		};
		#elseif {%1 >= 50}
		{
			#math {enemyConditionTone} {%1 + 320}
		};
		#elseif {%1 >= 40}
		{
			#math {enemyConditionTone} {%1 + 300}
		};
		#elseif {%1 >= 30}
		{
			#math {enemyConditionTone} {%1 + 280}
		};
		#elseif {%1 >= 20}
		{
			#math {enemyConditionTone} {%1 + 260}
		};
		#elseif {%1 >= 10}
		{
			#math {enemyConditionTone} {%1 + 240}
		};
		#else
		{
			#math {enemyConditionTone} {%1 + 220}
		};
		#system {play -q -V0 -n synth 0.06 tri $enemyConditionTone fade 0.01 0.06 gain $volume &> /dev/null &}
	}
}
{8}

#ACTION {^kxwt_fighting -1$}
{
	#variable {kxwt[fighting]} {-1};
	#variable {character[inBattle]} {false}
}
{8}

#ACTION {^kxwt_group %d %d %3 skelet%*}
{
	#if {%1 < %2 * 0.9}
	{
		#variable {doAutoMend} {true}
	}
}
{8}

#ACTION {^kxwt_mdeath %1}
{
	#variable {kxwt[mdeath]} {%1};
	#variable {client[capSound]} {true};
	#if {"%1" != "{$ignoredMobs}"}
	{
		#if {"${skillsAndSpells[cry of victory]}" == "true"}
		{
			victory | grep -v You haven't had a recent victory worth shouting about.
		};
		#if {&{throwWeapon}}
		{
			#send {get all.$throwWeapon corpse}
		};
		#if {&{lastSoulsteal}}
		{
			#unvariable {lastSoulsteal}
		};
		#if {"${pkMode}" != "true"}
		{
			#delay {0.5}{#if {"${auto[consume]}" == "true"}{control all consume corpse};#if {"${auto[bloodsacrifice]}" == "true" && "${character[inBattle]}" != "true"}{bsac corpse};#if {"${skillsAndSpells[corpsecutter]}" ==      "true" && "${character[inBattle]}" != "true"}{harvest components corpse};#if {"${skillsAndSpells[harvest bone]}" ==      "true" && "${character[inBattle]}" != "true"}{harvest bone corpse | grep -v has no useful bones remaining};#if {"${skillsAndSpells[salvage equipment]}" == "true" || &{battleScroll} && "${character[inBattle]}" != "true"}{search corpse | grep -v unique | prefix silent_};#if {"${auto[flesh]}" == "true"}{#if                     {"$makeNewFleshBeast" == "true"}{c flesh corpse};#else {lowhp | prefix silent_}};#if {&{lastReceivedExp}}{#unvariable {lastReceivedExp}};#if {&{position}}{$position}}
		}
	}
}
{8}

#ACTION {^kxwt_myname %S}
{
	#variable {kxwt[myname]} {%1};
	#variable {gameDataPath} {${HOME}/%1};
	#variable {characterModulePath} {${HOME}/%1.modules};
	#format {name} {%n} {%1};
	#variable {historyPath} {${HOME}/%1.history};
	#script {if [ -f "$gameDataPath" ]; then echo "#class {gameData} {read} {$gameDataPath}";fi;if [ -f "$historyPath" ] ; then echo "#history {read} {$historyPath}";fi};
	#script {if [ -d "$characterModulePath" ]; then for module in $characterModulePath/*.tin ; do echo "#class {character_$(basename "$module" .tin)} {read} {$module}";done;fi};
	#script {if [ -d "$HOME/modules" ]; then for module in $HOME/modules/*.tin ; do echo "#class {character_$(basename "$module" .tin)} {read} {$module}";done;fi};
	#class {gameData} {open};
	#ticker {saver} {qcsave} {30}
}
{8}

#ACTION {^kxwt_prompt %1 %2 %3 %4 %5 %6}
{
	#variable {kxwt[prompt]} {%1 %2 %3 %4 %5 %6};
	#variable {character[currentHp]} {%1};
	#variable {character[maxHp]} {%2};
	#variable {character[hpPercent]} {@percent{${character[currentHp]};${character[maxHp]}}};
	#variable {character[currentMana]} {%3};
	#variable {character[maxMana]} {%4};
	#variable {character[manaPercent]} {@percent{${character[currentMana]};${character[maxMana]}}};
	#variable {character[currentMv]} {%5};
	#variable {character[maxMv]} {%6};
	#variable {character[mvPercent]} {@percent{${character[currentMv]};${character[maxMv]}}};
	#nop {Make sure alert variables are the correct type or sounds will not play.};
	#if {!&{character[lastHpAlert]} || "${character[lastHpAlert]}" == ""}
	{
		#variable {character[lastHpAlert]} {0}
	};
	#if {!&{character[lastManaAlert]} || "${character[lastManaAlert]}" == ""}
	{
		#variable {character[lastManaAlert]} {0}
	};
	#if {!&{character[lastMvAlert]} || "${character[lastMvAlert]}" == ""}
	{
		#variable {character[lastMvAlert]} {0}
	};
	#nop {Audio prompts.};
	#if {${character[hpPercent]} / 10 != ${character[lastHpAlert]}}
	{
		#math {character[lastHpAlert]} {${character[hpPercent]} / 10};
		synth_play hp${character[lastHpAlert]}
	};
	#if {${character[manaPercent]} / 10 != ${character[lastManaAlert]}}
	{
		#math {character[lastManaAlert]} {${character[manaPercent]} / 10};
		synth_play mn${character[lastManaAlert]}
	};
	#if {${character[mvPercent]} / 10 != ${character[lastMvAlert]}}
	{
		#math {character[lastMvAlert]} {${character[mvPercent]} / 10};
		synth_play mv${character[lastMvAlert]}
	};
	#if {%1 == %2 && %3 >= %4 - 3 && %5 == %6 && "${character[regenAlert]}" != "true"}
	{
		play regen-complete;
		#variable {character[regenAlert]} {true}
	};
	#if {${character[hpPercent]} < 95 || ${character[manaPercent]} < 60 || ${character[mvPercent]} < 95}
	{
		#unvariable {character[regenAlert]}
	};
	#nop {automation};
	#if {"${auto[refresh]}" == "true"}
	{
		@autorefresh{}
	}
}
{8}

#ACTION {^kxwt_rvnum {\d*}}
{
	#nop {Hook name: rvnum};
	#nop {Hook args: %1 new room number};
	#nop {Hook args: %2 old room number};
	@do_hook{rvnum;%1;$oldVnum};
	#if {%1 != $oldVnum}
	{
		#if {"$busy" == "true"}
		{
			#variable {busy} {false}
		};
		#variable {oldVnum} {%1};
		#variable {mineCounter} {0}
	};
	#variable {kxwt[rvnum]} {%1};
	#variable {vnum} {%1};
	#if {!&{roomVnumList}}
	{
		#variable {roomVnumList} {}
	};
	#list {roomVnumList} {find} {%1} {i};
	#if {$i > 0}
	{
		#variable {exploredRoomString} {*}
	};
	#else
	{
		#list {roomVnumList} {sort} {%1};
		#variable {exploredRoomString} {}
	}
}
{8}

#ACTION {^kxwt_terrain %d}
{
	#variable {kxwt[terrain]} {%1};
	#variable {terrainNumber} {%1}
}
{8}

#ACTION {^kxwt_time %1}
{
	#variable {kxwt[time]} {%1};
	#regexp {%1} {{.*} {.*}:{.*} {.*}} {#if {$lastPlayedTime != &2} {#if {"$editorMode" != "true"}{#delay {0.5}{#if {!&{repop[mob]}}{#variable {repop[mob]} {false}};#if {"${repop[mob]}" != "false"}{where ${repop[mob]} | prefix mobrepop_};#if {"${repop[instance]}" == "true"}{instance | prefix instancerepop_}};#delay {1} {leaderboard_update}};#if {"&4" == "am" && &2 == 7 && &3 == 00} {play sunrise};#elseif {"&4" == "pm" && &2 == 7 && &3 == 00} {play sunset};#if {"$clock" == "true"} {#variable {chimeCounter} {1};#variable {chimeLoop} {};#while {$chimeCounter <= &2}{#variable {chimeLoop} {$chimeLoop $HOME/sounds/clock.wav};#math {chimeCounter} {$chimeCounter + 1}};#echo {&2 O'clock &4};#if {"$msp" == "true"} {#system {play -q $chimeLoop gain $volume &> /dev/null &}}}};#variable {lastPlayedTime} {&2}}
}
{8}

#ACTION {^kxwt_walkdir %d$}
{
	#variable {kxwt[walkdir]} {%1}
}
{8}

#ACTION {^kxwt_waypoint$}
{
	play waypoint
}
{8}

#ACTION {^kxwt_%1 %2}
{
	#variable {kxwt[%1]} {%2}
}
{9}

#ACTION {^kxwt_supported$}
{
	#cursor {echo} {on};
	#variable {client[gagPing]} {true};
	ping;
	set ctrigger on | prefix silent_;
	set telnetga off | prefix silent_;
	SHOW_VERSION;
	%connect cowsay | prefix silent_
}
{9}

#ALIAS {^cmod{kill|load|reload} %S$}
{
	#nop {reload all modules};
	#if {"%0" == "cmodreload all"}
	{
		#script {for module in $characterModulePath/*.tin $HOME/modules/*.tin ; do echo "#class {$(basename "$module" .tin)} {kill};#class {character_$(basename "$module" .tin)} {read} {$module}";done};
		#echo {All character modules reloaded}
	};
	#else
	{
		#nop {Kill, load, or reload a specified module.};
		#if {"%1" == "{kill|reload}"}
		{
			#class {character_%2} {kill};
			#showme {Character module %2 has been killed.}
		};
		#if {"%1" == "{load|reload}"}
		{
			#showme {Loading character module %2.tin};
			#script {if [ -f "$characterModulePath/%2.tin" ]; then echo "#class {character_%2} {read} {$characterModulePath/%2.tin}";else echo "#class {character_%2} {read} {$HOME/modules/%2.tin}";fi};
			#class {gameData} {open}
		}
	};
	#unvariable {modpath}
}
{9}

#GAG              {^kxwt_%*}
#SUBSTITUTE       { ]$}  { ]${exploredRoomString}}  {1}
#VARIABLE         {areaNumber}  {-2}
#VARIABLE         {checkedLevel}  {false}
#VARIABLE         {chimeCounter}  {}
#VARIABLE         {chimeLoop}  {}
#VARIABLE         {currentMv}  {}
#VARIABLE         {enemyConditionTone}  {}
#VARIABLE         {ignoredMobs}  {A blood red winged demon|A clutch of poison ivy vines|.*draconian|.*draconian.*|.*elemental|a fire ant.*|.*fungus.*|A mass of tangling roots|.*shroom.*A number of magical dancing lights|.*moogle|the soul faerie|a .* slime|A slimy fish|.*spore.*|a.*tree|Vampiric vines|.*zombie.*|an icebolg|.* skelet.*}
#VARIABLE         {kxwt}  {}
#VARIABLE         {lastPlayedTime}  {0}
#VARIABLE         {mvRegenTime}  {}
#VARIABLE         {oldAreaNumber}  {-2}
#VARIABLE         {roomVnumList}  {}
#VARIABLE         {vnum}  {0}
